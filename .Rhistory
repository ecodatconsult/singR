deployment_path <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_path) |>
dplyr::collect() |>
dplyr::pull(deployment_path)
# get setting ids run for this deployment (a deployment may be processed with various parameters)
settings_ids <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(analyze_settings_id, deployment_id) |>
dplyr::collect()
# get
analyze_settings_id_sel = settings_ids$analyze_settings_id[1]
for(analyze_settings_id_sel in settings_ids$analyze_settings_id){
birdnet_analyze_results <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel & analyze_settings_id == analyze_settings_id_sel) |>
dplyr::collect()
output_dir <- paste0(dirname(input_dir), "/", basename(input_dir), "_birdnet")
deployment_dir <- paste0(output_dir, "/", paste0(deployment_name, "__", deployment_id_sel))
settings_dir <- paste0(deployment_dir, "/"  , analyze_settings_id_sel)
data_dir <- paste0(settings_dir, "/Data")
segments_dir <- paste0(settings_dir, "/segments/")
classifications_dir <- paste0(settings_dir, "/selected_Data/")
message(paste0(Sys.time(), ": creating segments"))
files_with_best_detection <- birdnet_analyze_results |>
dplyr::group_by(common_name) |>
dplyr::filter(confidence == max(confidence)) |>
dplyr::filter(common_name != "nocall")
analysis_files <-  basename(files_with_best_detection$data_file) |>
tools::file_path_sans_ext() |>
paste0(".Bird") |>
sapply(function(data_dir, pattern){
list.files(data_dir, pattern = pattern, recursive = TRUE, full.names = TRUE)},
data_dir = data_dir) |>
lapply(function(x) x[1]) |>
unlist()
analysis_files2 <- list.files(data_dir, pattern = "selection.table.txt", recursive = TRUE, full.names = TRUE)
analysis_files_2_segment <-
c(
analysis_files,
analysis_files2[!analysis_files2 %in% analysis_files] %>%
sample(size = ceiling(length(.)/10))
)
unique_analysis_files <- analysis_files_2_segment |> unique()
if(length(list.files(classifications_dir, pattern = "selection.table.txt") == 0) | replace_segments){
file.remove(list.files(classifications_dir, full.names = TRUE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =FALSE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =TRUE))
file.copy(unique_analysis_files, classifications_dir)
run_birdnet(mode = "segments",
birdnet_loc = "~/BirdNET-Analyzer/",
birdnet_args = list(audio = deployment_path,
results = classifications_dir,
o = segments_dir,
min_conf = 0.2,
seg_length = 3.5
))
create_birdnet_workbook(dir_path = settings_dir)
}
}
}
# set false if existing segments should not be overwritten
replace_segments <- TRUE
# for testing the loop
# deployment_id_sel <- deployment$deployment_id[1]
for(deployment_id_sel in deployment$deployment_id){
# get deployment name of selected deployment
deployment_name <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_name) |>
dplyr::collect() |>
dplyr::pull(deployment_name)
# get deployment path of selected deployment
deployment_path <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_path) |>
dplyr::collect() |>
dplyr::pull(deployment_path)
# get setting ids run for this deployment (a deployment may be processed with various parameters)
settings_ids <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(analyze_settings_id, deployment_id) |>
dplyr::collect()
# get analysis ids
analyze_settings_id_sel = settings_ids$analyze_settings_id[1]
# iterate through analysis ids
for(analyze_settings_id_sel in settings_ids$analyze_settings_id){
# get results stored in database for certain settings and deployment
birdnet_analyze_results <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel &
analyze_settings_id == analyze_settings_id_sel) |>
dplyr::collect()
# create output folder paths
output_dir <- paste0(dirname(input_dir), "/", basename(input_dir), "_birdnet")
deployment_dir <- paste0(output_dir, "/", paste0(deployment_name, "__", deployment_id_sel))
settings_dir <- paste0(deployment_dir, "/"  , analyze_settings_id_sel)
data_dir <- paste0(settings_dir, "/Data")
segments_dir <- paste0(settings_dir, "/segments/")
classifications_dir <- paste0(settings_dir, "/selected_Data/")
#
files_with_best_detection <- birdnet_analyze_results |>
dplyr::group_by(common_name) |>
dplyr::filter(confidence == max(confidence)) |>
dplyr::filter(common_name != "nocall")
analysis_files <-  basename(files_with_best_detection$data_file) |>
tools::file_path_sans_ext() |>
paste0(".Bird") |>
sapply(function(data_dir, pattern){
list.files(data_dir, pattern = pattern, recursive = TRUE, full.names = TRUE)},
data_dir = data_dir) |>
lapply(function(x) x[1]) |>
unlist()
analysis_files2 <- list.files(data_dir, pattern = "selection.table.txt", recursive = TRUE, full.names = TRUE)
analysis_files_2_segment <-
c(
analysis_files,
analysis_files2[!analysis_files2 %in% analysis_files] %>%
sample(size = ceiling(length(.)/10))
)
unique_analysis_files <- analysis_files_2_segment |> unique()
if(length(list.files(classifications_dir, pattern = "selection.table.txt") == 0) | replace_segments){
message(paste0(Sys.time(), ": creating segments"))
# remove previously sampled segments
file.remove(list.files(classifications_dir, full.names = TRUE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =FALSE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =TRUE))
file.copy(unique_analysis_files, classifications_dir)
run_birdnet(mode = "segments",
birdnet_loc = "~/BirdNET-Analyzer/",
birdnet_args = list(audio = deployment_path,
results = classifications_dir,
o = segments_dir,
min_conf = 0.2,
seg_length = 3.5
))
create_birdnet_workbook(dir_path = settings_dir)
}
}
}
dplyr::tbl(con, "birdnet_analyze_results")
dplyr::tbl(con, "birdnet_analyze_results") |>
distinct(common_name)
dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::distinct(common_name)
dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::distinct(common_name) |>
dplyr::collect()
dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::distinct(common_name) |>
dplyr::collect() |>
readr::write_csv("species_list.csv")
system.file("species_list.csv", package = "singR")
devtools::install()
devtools::install()
devtools::install()
singR
library(singR)
devtools::install()
devtools::load_all()
devtools::document()
devtools::install()
devtools::test()
devtools::load_all()
devtools::load_all()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
system.file("species_list.csv", package = "singR")
dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::distinct(common_name) |>
dplyr::collect() |>
readr::write_csv("species_list.csv")
dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::distinct(common_name) |>
dplyr::collect() |>
readr::write_csv("species_list.csv")
dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::distinct(common_name) |>
dplyr::collect()
dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::distinct(common_name)
dplyr::tbl(con, "birdnet_analyze_results")
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_location)
dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::distinct(common_name) |>
dplyr::collect() |>
readr::write_csv("species_list.csv")
readr::read_csv(system.file("/data/species_list.csv"), package = "singR"))
readr::read_csv(system.file("/data/species_list.csv", package = "singR"))
system.file("/data/species_list.csv", package = "singR")
system.file("data", package = "singR")
devtools::install()
system.file("data", package = "singR")
readr::read_csv(system.file("data/species_list.csv", package = "singR"))
readr::read_csv(system.file("data/species_list.csv", package = "singR"))|>
dplyr::pull(common_name)
common_names <- readr::read_csv(system.file("data/species_list.csv", package = "singR"))|>
dplyr::pull(common_name)
devtools::load_all()
devtools::install()
# set false if existing segments should not be overwritten
replace_segments <- TRUE
# for testing the loop
# deployment_id_sel <- deployment$deployment_id[1]
for(deployment_id_sel in deployment$deployment_id){
# get deployment name of selected deployment
deployment_name <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_name) |>
dplyr::collect() |>
dplyr::pull(deployment_name)
# get deployment path of selected deployment
deployment_path <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_path) |>
dplyr::collect() |>
dplyr::pull(deployment_path)
# get setting ids run for this deployment (a deployment may be processed with various parameters)
settings_ids <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(analyze_settings_id, deployment_id) |>
dplyr::collect()
# get analysis ids
analyze_settings_id_sel = settings_ids$analyze_settings_id[1]
# iterate through analysis ids
for(analyze_settings_id_sel in settings_ids$analyze_settings_id){
# get results stored in database for certain settings and deployment
birdnet_analyze_results <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel &
analyze_settings_id == analyze_settings_id_sel) |>
dplyr::collect()
# create output folder paths
output_dir <- paste0(dirname(input_dir), "/", basename(input_dir), "_birdnet")
deployment_dir <- paste0(output_dir, "/", paste0(deployment_name, "__", deployment_id_sel))
settings_dir <- paste0(deployment_dir, "/"  , analyze_settings_id_sel)
data_dir <- paste0(settings_dir, "/Data")
segments_dir <- paste0(settings_dir, "/segments/")
classifications_dir <- paste0(settings_dir, "/selected_Data/")
#
files_with_best_detection <- birdnet_analyze_results |>
dplyr::group_by(common_name) |>
dplyr::filter(confidence == max(confidence)) |>
dplyr::filter(common_name != "nocall")
analysis_files <-  basename(files_with_best_detection$data_file) |>
tools::file_path_sans_ext() |>
paste0(".Bird") |>
sapply(function(data_dir, pattern){
list.files(data_dir, pattern = pattern, recursive = TRUE, full.names = TRUE)},
data_dir = data_dir) |>
lapply(function(x) x[1]) |>
unlist()
analysis_files2 <- list.files(data_dir, pattern = "selection.table.txt", recursive = TRUE, full.names = TRUE)
analysis_files_2_segment <-
c(
analysis_files,
analysis_files2[!analysis_files2 %in% analysis_files] %>%
sample(size = ceiling(length(.)/10))
)
unique_analysis_files <- analysis_files_2_segment |> unique()
if(length(list.files(classifications_dir, pattern = "selection.table.txt") == 0) | replace_segments){
message(paste0(Sys.time(), ": creating segments"))
# remove previously sampled segments
file.remove(list.files(classifications_dir, full.names = TRUE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =FALSE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =TRUE))
file.copy(unique_analysis_files, classifications_dir)
run_birdnet(mode = "segments",
birdnet_loc = "~/BirdNET-Analyzer/",
birdnet_args = list(audio = deployment_path,
results = classifications_dir,
o = segments_dir,
min_conf = 0.2,
seg_length = 3.5
))
create_birdnet_workbook(dir_path = settings_dir)
}
}
}
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_location)
# set false if existing segments should not be overwritten
replace_segments <- TRUE
# for testing the loop
# deployment_id_sel <- deployment$deployment_id[1]
for(deployment_id_sel in deployment$deployment_id){
# get deployment name of selected deployment
deployment_name <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_name) |>
dplyr::collect() |>
dplyr::pull(deployment_name)
# get deployment path of selected deployment
deployment_path <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_path) |>
dplyr::collect() |>
dplyr::pull(deployment_path)
# get setting ids run for this deployment (a deployment may be processed with various parameters)
settings_ids <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(analyze_settings_id, deployment_id) |>
dplyr::collect()
# get analysis ids
analyze_settings_id_sel = settings_ids$analyze_settings_id[1]
# iterate through analysis ids
for(analyze_settings_id_sel in settings_ids$analyze_settings_id){
# get results stored in database for certain settings and deployment
birdnet_analyze_results <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel &
analyze_settings_id == analyze_settings_id_sel) |>
dplyr::collect()
# create output folder paths
output_dir <- paste0(dirname(input_dir), "/", basename(input_dir), "_birdnet")
deployment_dir <- paste0(output_dir, "/", paste0(deployment_name, "__", deployment_id_sel))
settings_dir <- paste0(deployment_dir, "/"  , analyze_settings_id_sel)
data_dir <- paste0(settings_dir, "/Data")
segments_dir <- paste0(settings_dir, "/segments/")
classifications_dir <- paste0(settings_dir, "/selected_Data/")
#
files_with_best_detection <- birdnet_analyze_results |>
dplyr::group_by(common_name) |>
dplyr::filter(confidence == max(confidence)) |>
dplyr::filter(common_name != "nocall")
analysis_files <-  basename(files_with_best_detection$data_file) |>
tools::file_path_sans_ext() |>
paste0(".Bird") |>
sapply(function(data_dir, pattern){
list.files(data_dir, pattern = pattern, recursive = TRUE, full.names = TRUE)},
data_dir = data_dir) |>
lapply(function(x) x[1]) |>
unlist()
analysis_files2 <- list.files(data_dir, pattern = "selection.table.txt", recursive = TRUE, full.names = TRUE)
analysis_files_2_segment <-
c(
analysis_files,
analysis_files2[!analysis_files2 %in% analysis_files] %>%
sample(size = ceiling(length(.)/10))
)
unique_analysis_files <- analysis_files_2_segment |> unique()
if(length(list.files(classifications_dir, pattern = "selection.table.txt") == 0) | replace_segments){
message(paste0(Sys.time(), ": creating segments"))
# remove previously sampled segments
file.remove(list.files(classifications_dir, full.names = TRUE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =FALSE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =TRUE))
file.copy(unique_analysis_files, classifications_dir)
run_birdnet(mode = "segments",
birdnet_loc = "~/BirdNET-Analyzer/",
birdnet_args = list(audio = deployment_path,
results = classifications_dir,
o = segments_dir,
min_conf = 0.2,
seg_length = 3.5
))
create_birdnet_workbook(dir_path = settings_dir)
}
}
}
devtools::load_all()
con <- RSQLite::dbConnect(RSQLite::SQLite(), db_location)
# for testing the loop
# deployment_id_sel <- deployment$deployment_id[1]
for(deployment_id_sel in deployment$deployment_id){
# get deployment name of selected deployment
deployment_name <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_name) |>
dplyr::collect() |>
dplyr::pull(deployment_name)
# get deployment path of selected deployment
deployment_path <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_path) |>
dplyr::collect() |>
dplyr::pull(deployment_path)
# get setting ids run for this deployment (a deployment may be processed with various parameters)
settings_ids <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(analyze_settings_id, deployment_id) |>
dplyr::collect()
# get analysis ids
analyze_settings_id_sel = settings_ids$analyze_settings_id[1]
# iterate through analysis ids
for(analyze_settings_id_sel in settings_ids$analyze_settings_id){
# get results stored in database for certain settings and deployment
birdnet_analyze_results <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel &
analyze_settings_id == analyze_settings_id_sel) |>
dplyr::collect()
# create output folder paths
output_dir <- paste0(dirname(input_dir), "/", basename(input_dir), "_birdnet")
deployment_dir <- paste0(output_dir, "/", paste0(deployment_name, "__", deployment_id_sel))
settings_dir <- paste0(deployment_dir, "/"  , analyze_settings_id_sel)
data_dir <- paste0(settings_dir, "/Data")
segments_dir <- paste0(settings_dir, "/segments/")
classifications_dir <- paste0(settings_dir, "/selected_Data/")
#
files_with_best_detection <- birdnet_analyze_results |>
dplyr::group_by(common_name) |>
dplyr::filter(confidence == max(confidence)) |>
dplyr::filter(common_name != "nocall")
analysis_files <-  basename(files_with_best_detection$data_file) |>
tools::file_path_sans_ext() |>
paste0(".Bird") |>
sapply(function(data_dir, pattern){
list.files(data_dir, pattern = pattern, recursive = TRUE, full.names = TRUE)},
data_dir = data_dir) |>
lapply(function(x) x[1]) |>
unlist()
analysis_files2 <- list.files(data_dir, pattern = "selection.table.txt", recursive = TRUE, full.names = TRUE)
analysis_files_2_segment <-
c(
analysis_files,
analysis_files2[!analysis_files2 %in% analysis_files] %>%
sample(size = ceiling(length(.)/10))
)
unique_analysis_files <- analysis_files_2_segment |> unique()
if(length(list.files(classifications_dir, pattern = "selection.table.txt") == 0) | replace_segments){
message(paste0(Sys.time(), ": creating segments"))
# remove previously sampled segments
file.remove(list.files(classifications_dir, full.names = TRUE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =FALSE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =TRUE))
file.copy(unique_analysis_files, classifications_dir)
run_birdnet(mode = "segments",
birdnet_loc = "~/BirdNET-Analyzer/",
birdnet_args = list(audio = deployment_path,
results = classifications_dir,
o = segments_dir,
min_conf = 0.2,
seg_length = 3.5
))
create_birdnet_workbook(dir_path = settings_dir)
}
}
}
devtools::load_all()
# for testing the loop
# deployment_id_sel <- deployment$deployment_id[1]
for(deployment_id_sel in deployment$deployment_id){
# get deployment name of selected deployment
deployment_name <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_name) |>
dplyr::collect() |>
dplyr::pull(deployment_name)
# get deployment path of selected deployment
deployment_path <- dplyr::tbl(con, "deployments") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(deployment_path) |>
dplyr::collect() |>
dplyr::pull(deployment_path)
# get setting ids run for this deployment (a deployment may be processed with various parameters)
settings_ids <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel) |>
dplyr::distinct(analyze_settings_id, deployment_id) |>
dplyr::collect()
# get analysis ids
analyze_settings_id_sel = settings_ids$analyze_settings_id[1]
# iterate through analysis ids
for(analyze_settings_id_sel in settings_ids$analyze_settings_id){
# get results stored in database for certain settings and deployment
birdnet_analyze_results <- dplyr::tbl(con, "birdnet_analyze_results") |>
dplyr::filter(deployment_id == deployment_id_sel &
analyze_settings_id == analyze_settings_id_sel) |>
dplyr::collect()
# create output folder paths
output_dir <- paste0(dirname(input_dir), "/", basename(input_dir), "_birdnet")
deployment_dir <- paste0(output_dir, "/", paste0(deployment_name, "__", deployment_id_sel))
settings_dir <- paste0(deployment_dir, "/"  , analyze_settings_id_sel)
data_dir <- paste0(settings_dir, "/Data")
segments_dir <- paste0(settings_dir, "/segments/")
classifications_dir <- paste0(settings_dir, "/selected_Data/")
#
files_with_best_detection <- birdnet_analyze_results |>
dplyr::group_by(common_name) |>
dplyr::filter(confidence == max(confidence)) |>
dplyr::filter(common_name != "nocall")
analysis_files <-  basename(files_with_best_detection$data_file) |>
tools::file_path_sans_ext() |>
paste0(".Bird") |>
sapply(function(data_dir, pattern){
list.files(data_dir, pattern = pattern, recursive = TRUE, full.names = TRUE)},
data_dir = data_dir) |>
lapply(function(x) x[1]) |>
unlist()
analysis_files2 <- list.files(data_dir, pattern = "selection.table.txt", recursive = TRUE, full.names = TRUE)
analysis_files_2_segment <-
c(
analysis_files,
analysis_files2[!analysis_files2 %in% analysis_files] %>%
sample(size = ceiling(length(.)/10))
)
unique_analysis_files <- analysis_files_2_segment |> unique()
if(length(list.files(classifications_dir, pattern = "selection.table.txt") == 0) | replace_segments){
message(paste0(Sys.time(), ": creating segments"))
# remove previously sampled segments
file.remove(list.files(classifications_dir, full.names = TRUE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =FALSE))
file.remove(list.files(segments_dir, recursive = TRUE, full.names = TRUE, include.dirs =TRUE))
file.copy(unique_analysis_files, classifications_dir)
run_birdnet(mode = "segments",
birdnet_loc = "~/BirdNET-Analyzer/",
birdnet_args = list(audio = deployment_path,
results = classifications_dir,
o = segments_dir,
min_conf = 0.2,
seg_length = 3.5
))
create_birdnet_workbook(dir_path = settings_dir)
}
}
}
